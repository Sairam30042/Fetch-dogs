{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://frontend-take-home-service.fetch.com';\n\n// Configure axios to automatically handle credentials\naxios.defaults.withCredentials = true;\n\n// Function to handle user login\nexport const login = async (name, email) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n      name,\n      email\n    });\n    // Assuming the API sends back some user data or confirmation\n    return response.data;\n  } catch (error) {\n    console.error('Login API error:', error);\n    throw error; // Rethrow to handle it in the UI components\n  }\n};\n\n// Function to search dogs with filters\nexport const searchDogs = async (filters = {}) => {\n  try {\n    console.log('Sending API request with filters:', filters);\n    const response = await axios.get(`${API_BASE_URL}/dogs/search`, {\n      params: filters\n    });\n    console.log('API response:', response.data);\n    return response.data.resultIds.map(id => response.data[id]).filter(dog => dog);\n  } catch (error) {\n    console.error('Search API error:', error);\n    return [];\n  }\n};\n\n// Function to fetch all possible dog breeds\nexport const getBreeds = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/breeds`);\n    return response.data; // Assuming this API returns an array of breed names\n  } catch (error) {\n    console.error('Error fetching breeds:', error);\n    return []; // Return an empty array on error\n  }\n};\n\n// Function to fetch details of a single dog by ID\nexport const fetchDogDetails = async dogId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/${dogId}`);\n    if (response.data) {\n      return response.data;\n    }\n    throw new Error(\"Dog not found\"); // Throw an error if no data is returned\n  } catch (error) {\n    console.error('Error fetching dog details:', error);\n    throw error; // Rethrow to handle it in the UI components\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","defaults","withCredentials","login","name","email","response","post","data","error","console","searchDogs","filters","log","get","params","resultIds","map","id","filter","dog","getBreeds","fetchDogDetails","dogId","Error"],"sources":["/Users/pop/Desktop/fetch-dogs/src/api/fetchAPI.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://frontend-take-home-service.fetch.com';\n\n// Configure axios to automatically handle credentials\naxios.defaults.withCredentials = true;\n\n// Function to handle user login\nexport const login = async (name, email) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/login`, { name, email });\n    // Assuming the API sends back some user data or confirmation\n    return response.data;\n  } catch (error) {\n    console.error('Login API error:', error);\n    throw error; // Rethrow to handle it in the UI components\n  }\n};\n\n// Function to search dogs with filters\nexport const searchDogs = async (filters = {}) => {\n    try {\n        console.log('Sending API request with filters:', filters);\n        const response = await axios.get(`${API_BASE_URL}/dogs/search`, {\n            params: filters\n        });\n        console.log('API response:', response.data);\n        return response.data.resultIds.map(id => response.data[id]).filter(dog => dog);\n    } catch (error) {\n        console.error('Search API error:', error);\n        return [];\n    }\n};\n\n\n// Function to fetch all possible dog breeds\nexport const getBreeds = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/breeds`);\n    return response.data; // Assuming this API returns an array of breed names\n  } catch (error) {\n    console.error('Error fetching breeds:', error);\n    return []; // Return an empty array on error\n  }\n};\n\n// Function to fetch details of a single dog by ID\nexport const fetchDogDetails = async (dogId) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/${dogId}`);\n    if (response.data) {\n      return response.data;\n    }\n    throw new Error(\"Dog not found\"); // Throw an error if no data is returned\n  } catch (error) {\n    console.error('Error fetching dog details:', error);\n    throw error; // Rethrow to handle it in the UI components\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,8CAA8C;;AAEnE;AACAD,KAAK,CAACE,QAAQ,CAACC,eAAe,GAAG,IAAI;;AAErC;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,YAAY,aAAa,EAAE;MAAEI,IAAI;MAAEC;IAAM,CAAC,CAAC;IAChF;IACA,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC9C,IAAI;IACAF,OAAO,CAACG,GAAG,CAAC,mCAAmC,EAAED,OAAO,CAAC;IACzD,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACe,GAAG,CAAC,GAAGd,YAAY,cAAc,EAAE;MAC5De,MAAM,EAAEH;IACZ,CAAC,CAAC;IACFF,OAAO,CAACG,GAAG,CAAC,eAAe,EAAEP,QAAQ,CAACE,IAAI,CAAC;IAC3C,OAAOF,QAAQ,CAACE,IAAI,CAACQ,SAAS,CAACC,GAAG,CAACC,EAAE,IAAIZ,QAAQ,CAACE,IAAI,CAACU,EAAE,CAAC,CAAC,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAAC;EAClF,CAAC,CAAC,OAAOX,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,EAAE;EACb;AACJ,CAAC;;AAGD;AACA,OAAO,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMP,KAAK,CAACe,GAAG,CAAC,GAAGd,YAAY,cAAc,CAAC;IAC/D,OAAOM,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,eAAe,GAAG,MAAOC,KAAK,IAAK;EAC9C,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMP,KAAK,CAACe,GAAG,CAAC,GAAGd,YAAY,SAASuB,KAAK,EAAE,CAAC;IACjE,IAAIjB,QAAQ,CAACE,IAAI,EAAE;MACjB,OAAOF,QAAQ,CAACE,IAAI;IACtB;IACA,MAAM,IAAIgB,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}