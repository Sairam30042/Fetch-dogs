{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://frontend-take-home-service.fetch.com';\n\n// Configure axios to automatically handle credentials\naxios.defaults.withCredentials = true;\n\n// Function to handle user login\nexport const login = async (name, email) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n      name,\n      email\n    });\n    // Assuming the API sends back some user data or confirmation\n    return response.data;\n  } catch (error) {\n    console.error('Login API error:', error);\n    throw error; // Rethrow to handle it in the UI components\n  }\n};\n\n// Function to search dogs with filters\nexport const searchDogs = async (filters = {}) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/search`, {\n      params: filters // Pass any filters to the API\n    });\n    // Make sure to adjust the data access according to the actual API response structure\n    if (response.data && Array.isArray(response.data.resultIds)) {\n      return response.data.resultIds.map(id => response.data[id]); // Assuming the API returns data in this specific format\n    }\n    return []; // Return empty if no data or not in expected format\n  } catch (error) {\n    console.error('Search API error:', error);\n    return []; // Return empty array on error to ensure UI doesn't break\n  }\n};\n\n// Function to fetch all possible dog breeds\nexport const getBreeds = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/breeds`);\n    return response.data; // Assuming this API returns an array of breed names\n  } catch (error) {\n    console.error('Error fetching breeds:', error);\n    return []; // Return an empty array on error\n  }\n};\n\n// Function to fetch details of a single dog by ID\nexport const fetchDogDetails = async dogId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/${dogId}`);\n    return response.data; // Assuming the API returns a dog object\n  } catch (error) {\n    console.error('Error fetching dog details:', error);\n    throw error; // Rethrow to handle it in the UI components\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","defaults","withCredentials","login","name","email","response","post","data","error","console","searchDogs","filters","get","params","Array","isArray","resultIds","map","id","getBreeds","fetchDogDetails","dogId"],"sources":["/Users/pop/Desktop/fetch-dogs/src/api/fetchAPI.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://frontend-take-home-service.fetch.com';\n\n// Configure axios to automatically handle credentials\naxios.defaults.withCredentials = true;\n\n// Function to handle user login\nexport const login = async (name, email) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/login`, { name, email });\n    // Assuming the API sends back some user data or confirmation\n    return response.data;\n  } catch (error) {\n    console.error('Login API error:', error);\n    throw error; // Rethrow to handle it in the UI components\n  }\n};\n\n// Function to search dogs with filters\nexport const searchDogs = async (filters = {}) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/search`, {\n      params: filters // Pass any filters to the API\n    });\n    // Make sure to adjust the data access according to the actual API response structure\n    if (response.data && Array.isArray(response.data.resultIds)) {\n      return response.data.resultIds.map(id => response.data[id]); // Assuming the API returns data in this specific format\n    }\n    return []; // Return empty if no data or not in expected format\n  } catch (error) {\n    console.error('Search API error:', error);\n    return []; // Return empty array on error to ensure UI doesn't break\n  }\n};\n\n// Function to fetch all possible dog breeds\nexport const getBreeds = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/breeds`);\n    return response.data; // Assuming this API returns an array of breed names\n  } catch (error) {\n    console.error('Error fetching breeds:', error);\n    return []; // Return an empty array on error\n  }\n};\n\n// Function to fetch details of a single dog by ID\nexport const fetchDogDetails = async (dogId) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/${dogId}`);\n    return response.data; // Assuming the API returns a dog object\n  } catch (error) {\n    console.error('Error fetching dog details:', error);\n    throw error; // Rethrow to handle it in the UI components\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,8CAA8C;;AAEnE;AACAD,KAAK,CAACE,QAAQ,CAACC,eAAe,GAAG,IAAI;;AAErC;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,YAAY,aAAa,EAAE;MAAEI,IAAI;MAAEC;IAAM,CAAC,CAAC;IAChF;IACA,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;EAChD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACc,GAAG,CAAC,GAAGb,YAAY,cAAc,EAAE;MAC9Dc,MAAM,EAAEF,OAAO,CAAC;IAClB,CAAC,CAAC;IACF;IACA,IAAIN,QAAQ,CAACE,IAAI,IAAIO,KAAK,CAACC,OAAO,CAACV,QAAQ,CAACE,IAAI,CAACS,SAAS,CAAC,EAAE;MAC3D,OAAOX,QAAQ,CAACE,IAAI,CAACS,SAAS,CAACC,GAAG,CAACC,EAAE,IAAIb,QAAQ,CAACE,IAAI,CAACW,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/D;IACA,OAAO,EAAE,CAAC,CAAC;EACb,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMP,KAAK,CAACc,GAAG,CAAC,GAAGb,YAAY,cAAc,CAAC;IAC/D,OAAOM,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,eAAe,GAAG,MAAOC,KAAK,IAAK;EAC9C,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMP,KAAK,CAACc,GAAG,CAAC,GAAGb,YAAY,SAASsB,KAAK,EAAE,CAAC;IACjE,OAAOhB,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}