{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://frontend-take-home-service.fetch.com';\n\n// Function to handle user login\nexport const login = async (name, email) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n      name,\n      email\n    }, {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Login API error:', error);\n    throw error;\n  }\n};\nexport const getDogs = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/search`, {\n      withCredentials: true\n    });\n    return response.data.dogs; // Assuming the response structure has an array under the 'dogs' key\n  } catch (error) {\n    console.error('Error fetching dogs:', error);\n    return []; // Return an empty array on error\n  }\n};\n\n// Function to search dogs with filters\nexport const searchDogs = async filters => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/search`, {\n      params: filters,\n      withCredentials: true\n    });\n    return response.data; // Adjust based on actual API response structure\n  } catch (error) {\n    console.error('Search API error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","login","name","email","response","post","withCredentials","data","error","console","getDogs","get","dogs","searchDogs","filters","params"],"sources":["/Users/pop/Desktop/fetch-dogs/src/api/fetchAPI.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://frontend-take-home-service.fetch.com';\n\n// Function to handle user login\nexport const login = async (name, email) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/login`, { name, email }, {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Login API error:', error);\n    throw error;\n  }\n};\n\nexport const getDogs = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/dogs/search`, { withCredentials: true });\n      return response.data.dogs; // Assuming the response structure has an array under the 'dogs' key\n    } catch (error) {\n      console.error('Error fetching dogs:', error);\n      return []; // Return an empty array on error\n    }\n  };\n  \n// Function to search dogs with filters\nexport const searchDogs = async (filters) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/dogs/search`, {\n      params: filters,\n      withCredentials: true\n    });\n    return response.data; // Adjust based on actual API response structure\n  } catch (error) {\n    console.error('Search API error:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,8CAA8C;;AAEnE;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,YAAY,aAAa,EAAE;MAAEE,IAAI;MAAEC;IAAM,CAAC,EAAE;MAC/EG,eAAe,EAAE;IACnB,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,OAAO,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAML,KAAK,CAACY,GAAG,CAAC,GAAGX,YAAY,cAAc,EAAE;MAAEM,eAAe,EAAE;IAAK,CAAC,CAAC;IAC1F,OAAOF,QAAQ,CAACG,IAAI,CAACK,IAAI,CAAC,CAAC;EAC7B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;;AAEH;AACA,OAAO,MAAMK,UAAU,GAAG,MAAOC,OAAO,IAAK;EAC3C,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAML,KAAK,CAACY,GAAG,CAAC,GAAGX,YAAY,cAAc,EAAE;MAC9De,MAAM,EAAED,OAAO;MACfR,eAAe,EAAE;IACnB,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}